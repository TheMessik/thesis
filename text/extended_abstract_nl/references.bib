@inproceedings{snort,
	author = {Roesch, Martin},
	title = {Snort - Lightweight Intrusion Detection for Networks},
	year = {1999},
	publisher = {USENIX Association},
	address = {USA},
	abstract = {Network intrusion detection systems (NIDS) are an important part of any network security architecture. They provide a layer of defense which monitors network traffic for predefined suspicious activity or patterns, and alert system administrators when potential hostile traffic is detected. Commercial NIDS have many differences, but Information Systems departments must face the commonalities that they share such as significant system footprint, complex deployment and high monetary cost. Snort was designed to address these issues.},
	booktitle = {Proceedings of the 13th USENIX Conference on System Administration},
	pages = {229â€“238},
	numpages = {10},
	location = {Seattle, Washington},
	series = {LISA '99}
}

@online{zeek,
	author = { zeek },
	title = { zeek / zeek },
	year = 2025,
	url = {https://github.com/zeek/zeek},
	urldate = {21-05-2025}
}

@online{suricata,
	title = { Suricata },
	year = 2025,
	url = {https://suricata.io/},
	urldate = {21-05-2025}
}

@article{knn_2002,
	title = {Use of K-Nearest Neighbor classifier for intrusion detection11An earlier version of this paper is to appear in the Proceedings of the 11th USENIX Security Symposium, San Francisco, CA, August 2002},
	journal = {Computers \& Security},
	volume = {21},
	number = {5},
	pages = {439-448},
	year = {2002},
	issn = {0167-4048},
	doi = {https://doi.org/10.1016/S0167-4048(02)00514-X},
	url = {https://www.sciencedirect.com/science/article/pii/S016740480200514X},
	author = {Yihua Liao and V.Rao Vemuri},
	keywords = {k-Nearest Neighbor classifier, intrusion detection, system calls, text categorization, program profile.},
	abstract = {A new approach, based on the k-Nearest Neighbor (kNN) classifier, is used to classify program behavior as normal or intrusive. Program behavior, in turn, is represented by frequencies of system calls. Each system call is treated as a word and the collection of system calls over each program execution as a document. These documents are then classified using kNN classifier, a popular method in text categorization. This method seems to offer some computational advantages over those that seek to characterize program behavior with short sequences of system calls and generate individual program profiles. Preliminary experiments with 1998 DARPA BSM audit data show that the kNN classifier can effectively detect intrusive attacks and achieve a low false positive rate.}
}

@inproceedings{j48_dt,
	title={Network intrusion detection system using J48 Decision Tree},
	author={Sahu, Shailendra and Mehtre, Babu M},
	booktitle={2015 International Conference on Advances in Computing, Communications and Informatics (ICACCI)},
	pages={2023--2026},
	year={2015},
	organization={IEEE}
}

@INPROCEEDINGS{nids_svm,
	title           = "Network intrusion detection based on support vector
	machine",
	booktitle       = "2009 International Conference on Management and Service
	Science",
	author          = "Bao, Xiaohui and Xu, Tianqi and Hou, Hui",
	publisher       = "IEEE",
	month           =  sep,
	year            =  2009,
	conference      = "2009 International Conference on Management and Service
	Science (MASS)",
	location        = "Beijing, China"
}

@Article{analysis_autoencoders,
	AUTHOR = {Song, Youngrok and Hyun, Sangwon and Cheong, Yun-Gyung},
	TITLE = {Analysis of Autoencoders for Network Intrusion Detection},
	JOURNAL = {Sensors},
	VOLUME = {21},
	YEAR = {2021},
	NUMBER = {13},
	ARTICLE-NUMBER = {4294},
	URL = {https://www.mdpi.com/1424-8220/21/13/4294},
	PubMedID = {34201798},
	ISSN = {1424-8220},
	ABSTRACT = {As network attacks are constantly and dramatically evolving, demonstrating new patterns, intelligent Network Intrusion Detection Systems (NIDS), using deep-learning techniques, have been actively studied to tackle these problems. Recently, various autoencoders have been used for NIDS in order to accurately and promptly detect unknown types of attacks (i.e., zero-day attacks) and also alleviate the burden of the laborious labeling task. Although the autoencoders are effective in detecting unknown types of attacks, it takes tremendous time and effort to find the optimal model architecture and hyperparameter settings of the autoencoders that result in the best detection performance. This can be an obstacle that hinders practical applications of autoencoder-based NIDS. To address this challenge, we rigorously study autoencoders using the benchmark datasets, NSL-KDD, IoTID20, and N-BaIoT. We evaluate multiple combinations of different model structures and latent sizes, using a simple autoencoder model. The results indicate that the latent size of an autoencoder model can have a significant impact on the IDS performance.},
	DOI = {10.3390/s21134294}

@INPROCEEDINGS{nids_cnn,
author={Pham, Duc Minh and Shao, Yunlong and Li, Zhida and Makanju, Adetokunbo and Alomari, Zakaria},
booktitle={2024 2nd International Conference on Computer, Vision and Intelligent Technology (ICCVIT)}, 
title={Network Intrusion Detection with CNNs: A Comparative Study of Deep Learning and Machine Learning Models}, 
year={2024},
volume={},
number={},
pages={1-6},
keywords={Deep learning;Support vector machines;Machine learning algorithms;Accuracy;Computational modeling;Scalability;NSL-KDD;Robustness;Convolutional neural networks;Surges;Cybersecurity;Intrusion Detection;NSL-KDD;UNSW-NB15;Machine Learning},
doi={10.1109/ICCVIT63928.2024.10872423}}

 @conference{cic_2017,
author={Iman Sharafaldin and Arash {Habibi Lashkari} and Ali A. Ghorbani},
title={Toward Generating a New Intrusion Detection Dataset and Intrusion Traffic Characterization},
booktitle={Proceedings of the 4th International Conference on Information Systems Security and Privacy - ICISSP},
year={2018},
pages={108-116},
publisher={SciTePress},
organization={INSTICC},
doi={10.5220/0006639801080116},
isbn={978-989-758-282-0},
issn={2184-4356},
} 

@inproceedings{unsw-nb15,
title={UNSW-NB15: a comprehensive data set for network intrusion detection systems (UNSW-NB15 network data set)},
author={Moustafa, Nour and Slay, Jill},
booktitle={2015 military communications and information systems conference (MilCIS)},
pages={1--6},
year={2015},
organization={IEEE}
}

@misc{cic_2018,
author = {},
title = {{A} {R}ealistic {C}yber {D}efense {D}ataset ({C}{S}{E}-{C}{I}{C}-{I}{D}{S}2018) - {R}egistry of {O}pen {D}ata on {A}{W}{S} --- registry.opendata.aws},
howpublished = {\url{https://registry.opendata.aws/cse-cic-ids2018}},
year = {},
note = {[Accessed 03-05-2025]},
}

@ARTICLE{iscx_ids_2012,
title     = "Toward developing a systematic approach to generate benchmark
datasets for intrusion detection",
author    = "Shiravi, Ali and Shiravi, Hadi and Tavallaee, Mahbod and
Ghorbani, Ali A",
abstract  = "In network intrusion detection, anomaly-based approaches in
particular suffer from accurate evaluation, comparison, and
deployment which originates from the scarcity of adequate
datasets. Many such datasets are internal and cannot be shared
due to privacy issues, others are heavily anonymized and do not
reflect current trends, or they lack certain statistical
characteristics. These deficiencies are primarily the reasons
why a perfect dataset is yet to exist. Thus, researchers must
resort to datasets that are often suboptimal. As network
behaviors and patterns change and intrusions evolve, it has very
much become necessary to move away from static and one-time
datasets toward more dynamically generated datasets which not
only reflect the traffic compositions and intrusions of that
time, but are also modifiable, extensible, and reproducible. In
this paper, a systematic approach to generate the required
datasets is introduced to address this need. The underlying
notion is based on the concept of profiles which contain
detailed descriptions of intrusions and abstract distribution
models for applications, protocols, or lower level network
entities. Real traces are analyzed to create profiles for agents
that generate real traffic for HTTP, SMTP, SSH, IMAP, POP3, and
FTP. In this regard, a set of guidelines is established to
outline valid datasets, which set the basis for generating
profiles. These guidelines are vital for the effectiveness of
the dataset in terms of realism, evaluation capabilities, total
capture, completeness, and malicious activity. The profiles are
then employed in an experiment to generate the desirable dataset
in a testbed environment. Various multi-stage attacks scenarios
were subsequently carried out to supply the anomalous portion of
the dataset. The intent for this dataset is to assist various
researchers in acquiring datasets of this kind for testing,
evaluation, and comparison purposes, through sharing the
generated datasets and profiles.",
journal   = "Comput. Secur.",
publisher = "Elsevier BV",
volume    =  31,
number    =  3,
pages     = "357--374",
month     =  may,
year      =  2012,
language  = "en"
}



@INPROCEEDINGS{troubleshooting_cic2017,
author={Engelen, Gints and Rimmer, Vera and Joosen, Wouter},
booktitle={2021 IEEE Security and Privacy Workshops (SPW)}, 
title={Troubleshooting an Intrusion Detection Dataset: the CICIDS2017 Case Study}, 
year={2021},
volume={},
number={},
pages={7-12},
keywords={Network intrusion detection;Machine learning;Documentation;Data collection;Benchmark testing;Tools;Feature extraction;network intrusion detection;machine learning;benchmark dataset;data collection.},
doi={10.1109/SPW53761.2021.00009}}

@INPROCEEDINGS{bad_design_smells,
	author={Flood, Robert and Engelen, Gints and Aspinall, David and Desmet, Lieven},
	booktitle={2024 IEEE 9th European Symposium on Security and Privacy (EuroS\&P)}, 
	title={Bad Design Smells in Benchmark NIDS Datasets}, 
	year={2024},
	volume={},
	number={},
	pages={658-675},
	keywords={Systematics;Intrusion detection;Manuals;Machine learning;Benchmark testing;Reliability;Labeling},
	doi={10.1109/EuroSP60621.2024.00042}
}

@article{b_profile,
	author = {Sharafaldin, Iman and Gharib, Amirhossein and Habibi Lashkari, Arash and Ghorbani, Ali},
	year = {2017},
	month = {01},
	pages = {177-200},
	title = {Towards a Reliable Intrusion Detection Benchmark Dataset},
	volume = {2017},
	journal = {Software Networking},
	doi = {10.13052/jsn2445-9739.2017.009}
}

@misc {patator,
	author="Sebastien Macke",
	howpublished= {\url{https://github.com/lanjelot/patator}}
}


@online{seclists,
	author = {  Daniel Miessler  },
	title = { danielmiessler / SecLists },
	year = 2025,
	url = {https://github.com/danielmiessler/SecLists},
	urldate = {21-05-2025}
}

@online{slowhttptest,
	author = {Sergey Shekyan},
	title = {shekyan / Slowhttptest},
	year = 2024,
	url = {https://github.com/shekyan/slowhttptest},
	urldate = {21-05-2025}
}


@online{GoldenEye,
author = {Jan Seidl},
title = {jseidl / goldeneye},
year = 2020,
url = {https://github.com/jseidl/GoldenEye},
urldate = {21-05-2025}
}

@online{hulk,
author = {Sumalya Chatterjee},
title = {R3DHULK / HULK},
year = 2024,
url = {https://github.com/R3DHULK/HULK},
urldate = {21-05-2025}
}

@online{heartbleed,
title = {Heartbleed},
url = {https://heartbleed.com/},
urldate = {21-05-2025}
}

@online{heartbleed_notice,
title = {OpenSSL Security Notice},
url = {https://openssl-library.org/news/secadv/20140407.txt},
urldate = {21-05-2025}
}

@online{heartleech,
author = { Robert David Graham },
title = {robertdavidgraham / heartleech},
year = 2014,
url = {https://github.com/robertdavidgraham/heartleech},
urldate = {21-05-2025}
}

@online{metasploit,
author = { Rapid7 },
title = {rapid7 / metasploit-framework},
year = 2025,
url = {https://github.com/rapid7/metasploit-framework},
urldate = {21-05-2025}
}

@online{nmap,
author = { nmap },
title = {nmap/ nmap},
year = 2025,
url = {https://github.com/nmap/nmap},
urldate = {21-05-2025}
}

@online{loic,
author = { Jorge Oliveira },
title = { NewEraCracker / LOIC },
year = 2022,
url = {https://github.com/NewEraCracker/LOIC},
urldate = {21-05-2025}
}

@online{ares,
author = { sweetsoftware },
title = { sweetsoftware / Ares },
year = 2017,
url = {https://github.com/sweetsoftware/Ares},
urldate = {21-05-2025}
}

@online{dvwa,
author = {  Robin Wood   },
title = { digininja / DVWA },
year = 2025,
url = {https://github.com/digininja/DVWA},
urldate = {21-05-2025}
}

@MISC{cicflowmeter,
title     = "{CICFlowmeter-V4.0} (formerly known as {ISCXFlowMeter}) is a
network traffic Bi-flow generator and analyser for anomaly
detection. {https://github.com/ISCX/CICFlowMeter}",
author    = "Lashkari, Arash Habibi",
publisher = "Unpublished",
year      =  2018
}

@Misc{concap,
author={Van Nieuwenhove, Geert-Jan (ugent)01802387},
title={Genereren van DDoS aanvallen voor het cre{\"e}ren van een dataset.},
year={2023},
publisher={2023.},
abstract={Master of Science in de industri{\"e}le wetenschappen: informatica},
url={http://lib.ugent.be/catalog/rug01:003150617},
language={und}
}

@ARTICLE{sok_pragmatic_assessment,
title        = "{SoK}: Pragmatic assessment of machine Learning for Network
Intrusion Detection",
author       = "Apruzzese, Giovanni and Laskov, Pavel and Schneider, Johannes",
abstract     = "Machine Learning (ML) has become a valuable asset to solve
many real-world tasks. For Network Intrusion Detection (NID),
however, scientific advances in ML are still seen with
skepticism by practitioners. This disconnection is due to the
intrinsically limited scope of research papers, many of which
primarily aim to demonstrate new methods ``outperforming''
prior work -- oftentimes overlooking the practical
implications for deploying the proposed solutions in real
systems. Unfortunately, the value of ML for NID depends on a
plethora of factors, such as hardware, that are often
neglected in scientific literature. This paper aims to reduce
the practitioners' skepticism towards ML for NID by
``changing'' the evaluation methodology adopted in research.
After elucidating which ``factors'' influence the operational
deployment of ML in NID, we propose the notion of ``pragmatic
assessment'', which enable practitioners to gauge the real
value of ML methods for NID. Then, we show that the
state-of-research hardly allows one to estimate the value of
ML for NID. As a constructive step forward, we carry out a
pragmatic assessment. We re-assess existing ML methods for
NID, focusing on the classification of malicious network
traffic, and consider: hundreds of configuration settings;
diverse adversarial scenarios; and four hardware platforms.
Our large and reproducible evaluations enable estimating the
quality of ML for NID. We also validate our claims through a
user-study with security practitioners.",
year         =  2023,
primaryClass = "cs.CR",
eprint       = "2305.00550"
}

